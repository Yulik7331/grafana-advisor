#!/bin/bash

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
# –°–æ–≤–º–µ—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å Python –∏ Bash —Å–∫—Ä–∏–ø—Ç–æ–≤

set -e

SCRIPT_VERSION="1.0"
TIMESTAMP=$(date -Iseconds)

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_banner() {
    echo -e "${BLUE}============================================================${NC}"
    echo -e "${BLUE}  –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –£–°–¢–ê–ù–û–í–©–ò–ö –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê DOCKER${NC}"
    echo -e "${BLUE}============================================================${NC}"
    echo -e "${GREEN}–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:${NC}"
    echo "1. Grafana + Prometheus + cAdvisor (–≥–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä)"
    echo "2. cAdvisor (–∞–≥–µ–Ω—Ç –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫)"
    echo "3. –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
    echo "4. –î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
    echo "5. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
    echo -e "${BLUE}------------------------------------------------------------${NC}"
    echo "–í–µ—Ä—Å–∏—è: $SCRIPT_VERSION | –í—Ä–µ–º—è: $TIMESTAMP"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_docker() {
    if ! command -v docker &> /dev/null; then
        print_info "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker..."
        curl -fsSL https://get.docker.com -o get-docker.sh
        sh get-docker.sh
        usermod -aG docker $USER
        if command -v systemctl &> /dev/null; then
            systemctl enable docker
            systemctl start docker
        elif command -v service &> /dev/null; then
            service docker start
        fi
        rm -f get-docker.sh
        print_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        print_success "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

install_docker_compose() {
    if ! command -v docker-compose &> /dev/null; then
        print_info "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Compose..."
        COMPOSE_VERSION="v2.20.0"
        curl -L "https://github.com/docker/compose/releases/download/$COMPOSE_VERSION/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
        print_success "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        print_success "Docker Compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞
get_server_ip() {
    local detected_ip=$(hostname -I | awk '{print $1}')
    echo "–û–±–Ω–∞—Ä—É–∂–µ–Ω IP: $detected_ip"
    read -p "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç IP? (y/n): " use_detected

    if [[ $use_detected == "y" || $use_detected == "Y" ]]; then
        SERVER_IP=$detected_ip
    else
        read -p "–í–≤–µ–¥–∏—Ç–µ IP —Å–µ—Ä–≤–µ—Ä–∞: " SERVER_IP
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
create_main_server_config() {
    local grafana_password=$1
    local prometheus_targets=$2

    print_info "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞..."

    # docker-compose.yml
    cat > docker-compose.yml << EOF
version: '3.8'

services:
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "58080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    networks:
      - monitoring
    restart: unless-stopped
    command:
      - '--housekeeping_interval=30s'
      - '--docker_only=true'

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "59090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - monitoring
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "63000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=$grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  prometheus_data:
  grafana_data:

networks:
  monitoring:
    driver: bridge
EOF

    # prometheus.yml
    cat > prometheus.yml << EOF
global:
  scrape_interval: 15s
  evaluation_interval: 15s

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['prometheus:9090']

  - job_name: 'cadvisor'
    static_configs:
      - targets:
        - 'cadvisor:8080'           # –ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä (–ª–æ–∫–∞–ª—å–Ω—ã–π)
$prometheus_targets
    scrape_interval: 5s
    metrics_path: /metrics
EOF

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π Grafana
    mkdir -p grafana/provisioning/datasources
    mkdir -p grafana/provisioning/dashboards

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    cat > grafana/provisioning/datasources/prometheus.yml << EOF
apiVersion: 1

datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    orgId: 1
    url: http://prometheus:9090
    basicAuth: false
    isDefault: true
    editable: true
EOF

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞—à–±–æ—Ä–¥–æ–≤
    cat > grafana/provisioning/dashboards/dashboard.yml << EOF
apiVersion: 1

providers:
  - name: 'default'
    orgId: 1
    folder: ''
    type: file
    disableDeletion: false
    updateIntervalSeconds: 10
    allowUiUpdates: true
    options:
      path: /etc/grafana/provisioning/dashboards
EOF

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    cat > monitoring_config.json << EOF
{
  "install_type": "main_server",
  "server_ip": "$SERVER_IP",
  "grafana_password": "$grafana_password",
  "timestamp": "$TIMESTAMP",
  "version": "$SCRIPT_VERSION"
}
EOF

    print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∞–≥–µ–Ω—Ç–∞
create_agent_script() {
    cat > agent-setup.sh << 'EOF'
#!/bin/bash

echo "üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ cAdvisor –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
echo "============================================="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
if ! command -v docker &> /dev/null; then
    echo "‚öôÔ∏è  –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
    usermod -aG docker $USER
    if command -v systemctl &> /dev/null; then
        systemctl enable docker
        systemctl start docker
    fi
    echo "‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
else
    echo "‚úÖ Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ cAdvisor
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ cAdvisor..."
docker stop cadvisor 2>/dev/null || true
docker rm cadvisor 2>/dev/null || true

# –ó–∞–ø—É—Å–∫ cAdvisor
echo "üöÄ –ó–∞–ø—É—Å–∫ cAdvisor..."
docker run -d \
  --name=cadvisor \
  --restart=unless-stopped \
  -p 58080:8080 \
  -v /:/rootfs:ro \
  -v /var/run:/var/run:ro \
  -v /sys:/sys:ro \
  -v /var/lib/docker/:/var/lib/docker:ro \
  -v /dev/disk/:/dev/disk:ro \
  --privileged \
  --device=/dev/kmsg:/dev/kmsg \
  gcr.io/cadvisor/cadvisor:latest \
  --housekeeping_interval=30s \
  --docker_only=true

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞
sleep 5
if docker ps | grep -q cadvisor; then
    AGENT_IP=$(hostname -I | awk '{print $1}')
    echo "‚úÖ cAdvisor —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"
    echo "üìä –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã: http://$AGENT_IP:58080"
    echo "üîó –ò–ª–∏: http://localhost:58080"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫
    if curl -s http://localhost:58080/metrics | head -1 > /dev/null 2>&1; then
        echo "‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    else
        echo "‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    fi

    echo ""
    echo "üéØ –ì–û–¢–û–í–û!"
    echo "=========="
    echo "–≠—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –ø–æ—Ä—Ç—É 58080"
    echo "–î–æ–±–∞–≤—å—Ç–µ IP —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Prometheus:"
    echo "$AGENT_IP:58080"
else
    echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ cAdvisor"
    echo "–õ–æ–≥–∏:"
    docker logs cadvisor
    exit 1
fi
EOF
    chmod +x agent-setup.sh
    print_success "–°–∫—Ä–∏–ø—Ç –∞–≥–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
install_main_server() {
    echo ""
    echo -e "${BLUE}üèóÔ∏è  –£–°–¢–ê–ù–û–í–ö–ê –û–°–ù–û–í–ù–û–ì–û –°–ï–†–í–ï–†–ê${NC}"
    echo "==============================="

    # –ü–æ–ª—É—á–µ–Ω–∏–µ IP
    get_server_ip

    # –ü–∞—Ä–æ–ª—å Grafana
    read -p "–ü–∞—Ä–æ–ª—å –¥–ª—è Grafana admin (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: admin): " grafana_password
    grafana_password=${grafana_password:-admin}

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤
    echo ""
    echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:"
    prometheus_targets=""
    while true; do
        read -p "–í–≤–µ–¥–∏—Ç–µ IP –∞–≥–µ–Ω—Ç–∞ (Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è): " agent_ip
        if [[ -z "$agent_ip" ]]; then
            break
        fi
        prometheus_targets="$prometheus_targets        - '$agent_ip:58080'           # Agent $agent_ip\n"
        echo "–î–æ–±–∞–≤–ª–µ–Ω –∞–≥–µ–Ω—Ç: $agent_ip:58080"
    done

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    install_docker
    install_docker_compose

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    create_main_server_config "$grafana_password" "$prometheus_targets"
    create_agent_script

    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    echo ""
    print_info "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose down 2>/dev/null || true
    docker-compose up -d

    echo ""
    print_success "–û–°–ù–û–í–ù–û–ô –°–ï–†–í–ï–† –£–°–¢–ê–ù–û–í–õ–ï–ù!"
    echo "============================="
    echo "üåê Grafana:    http://$SERVER_IP:63000 (admin/$grafana_password)"
    echo "üìà Prometheus: http://$SERVER_IP:59090"
    echo "üìä cAdvisor:   http://$SERVER_IP:58080"
    echo ""
    echo "üìã –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤:"
    echo "1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ agent-setup.sh –Ω–∞ –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–µ—Ä–∞"
    echo "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo ./agent-setup.sh"
    echo "3. –î–æ–±–∞–≤—å—Ç–µ IP –∞–≥–µ–Ω—Ç–æ–≤ –≤ prometheus.yml"
    echo "4. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ Prometheus: curl -X POST http://$SERVER_IP:59090/-/reload"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞
install_agent() {
    echo ""
    echo -e "${BLUE}üîß –£–°–¢–ê–ù–û–í–ö–ê –ê–ì–ï–ù–¢–ê${NC}"
    echo "=================="

    # –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–≥–µ–Ω—Ç–∞
    local agent_ip=$(hostname -I | awk '{print $1}')
    echo "IP —ç—Ç–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: $agent_ip"

    # IP –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    read -p "–í–≤–µ–¥–∏—Ç–µ IP –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: " main_server_ip

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
    install_docker

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ cAdvisor
    docker stop cadvisor 2>/dev/null || true
    docker rm cadvisor 2>/dev/null || true

    # –ó–∞–ø—É—Å–∫ cAdvisor
    print_info "–ó–∞–ø—É—Å–∫ cAdvisor..."
    docker run -d \
      --name=cadvisor \
      --restart=unless-stopped \
      -p 58080:8080 \
      -v /:/rootfs:ro \
      -v /var/run:/var/run:ro \
      -v /sys:/sys:ro \
      -v /var/lib/docker/:/var/lib/docker:ro \
      -v /dev/disk/:/dev/disk:ro \
      --privileged \
      --device=/dev/kmsg:/dev/kmsg \
      gcr.io/cadvisor/cadvisor:latest \
      --housekeeping_interval=30s \
      --docker_only=true

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞
    sleep 5
    if docker ps | grep -q cadvisor; then
        echo ""
        print_success "–ê–ì–ï–ù–¢ –£–°–¢–ê–ù–û–í–õ–ï–ù!"
        echo "=================="
        echo "üìä –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã: http://$agent_ip:58080"
        echo ""
        echo "üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:"
        echo "1. –ù–∞ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ prometheus.yml"
        echo "2. –î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É: - '$agent_ip:58080'"
        echo "3. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ Prometheus: curl -X POST http://$main_server_ip:59090/-/reload"
        echo ""
        if curl -s http://localhost:58080/metrics | head -1 > /dev/null 2>&1; then
            print_success "–ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        else
            print_warning "–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        fi
    else
        print_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ cAdvisor"
        docker logs cadvisor
        exit 1
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
create_config_only() {
    echo ""
    echo -e "${BLUE}üìù –°–û–ó–î–ê–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò${NC}"
    echo "========================"

    get_server_ip

    read -p "–ü–∞—Ä–æ–ª—å –¥–ª—è Grafana admin (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: admin): " grafana_password
    grafana_password=${grafana_password:-admin}

    echo ""
    echo "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤:"
    prometheus_targets=""
    while true; do
        read -p "–í–≤–µ–¥–∏—Ç–µ IP –∞–≥–µ–Ω—Ç–∞ (Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è): " agent_ip
        if [[ -z "$agent_ip" ]]; then
            break
        fi
        prometheus_targets="$prometheus_targets        - '$agent_ip:58080'           # Agent $agent_ip\n"
        echo "–î–æ–±–∞–≤–ª–µ–Ω –∞–≥–µ–Ω—Ç: $agent_ip:58080"
    done

    create_main_server_config "$grafana_password" "$prometheus_targets"
    create_agent_script

    print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
    echo "–î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: sudo docker-compose up -d"
}

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
add_agents() {
    echo ""
    echo -e "${BLUE}‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ê–ì–ï–ù–¢–û–í${NC}"
    echo "===================="

    if [[ ! -f "prometheus.yml" ]]; then
        print_error "–§–∞–π–ª prometheus.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
        echo "–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
        return 1
    fi

    echo "–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
    grep -A 10 "job_name: 'cadvisor'" prometheus.yml

    echo ""
    while true; do
        read -p "–í–≤–µ–¥–∏—Ç–µ IP –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ (Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è): " agent_ip
        if [[ -z "$agent_ip" ]]; then
            break
        fi

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ prometheus.yml
        sed -i "/- 'cadvisor:8080'/a\\        - '$agent_ip:58080'           # Agent $agent_ip" prometheus.yml
        print_success "–ê–≥–µ–Ω—Ç $agent_ip:58080 –¥–æ–±–∞–≤–ª–µ–Ω"
    done

    echo ""
    echo "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
    grep -A 15 "job_name: 'cadvisor'" prometheus.yml

    echo ""
    print_info "–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
    echo "curl -X POST http://localhost:59090/-/reload"
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
show_status() {
    echo ""
    echo -e "${BLUE}üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´${NC}"
    echo "================"

    if command -v docker &> /dev/null; then
        print_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

        echo ""
        echo "–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
        docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}" | grep -E "(cadvisor|prometheus|grafana|NAMES)"

        echo ""
        echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤:"
        for port in 58080 59090 63000; do
            if ss -tulpn | grep -q ":$port "; then
                print_success "–ü–æ—Ä—Ç $port –æ—Ç–∫—Ä—ã—Ç"
            else
                print_warning "–ü–æ—Ä—Ç $port –∑–∞–∫—Ä—ã—Ç"
            fi
        done

        if [[ -f "prometheus.yml" ]]; then
            echo ""
            echo "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Prometheus:"
            grep -A 20 "job_name: 'cadvisor'" prometheus.yml
        fi

        if [[ -f "monitoring_config.json" ]]; then
            echo ""
            echo "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ:"
            cat monitoring_config.json | python3 -m json.tool 2>/dev/null || cat monitoring_config.json
        fi
    else
        print_warning "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu() {
    while true; do
        print_banner
        echo ""
        echo "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        echo "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä (Grafana + Prometheus + cAdvisor)"
        echo "2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≥–µ–Ω—Ç (—Ç–æ–ª—å–∫–æ cAdvisor)"
        echo "3. –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
        echo "4. –î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
        echo "5. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
        echo "6. –í—ã—Ö–æ–¥"
        echo ""

        read -p "–í–∞—à –≤—ã–±–æ—Ä (1-6): " choice

        case $choice in
            1)
                install_main_server
                break
                ;;
            2)
                install_agent
                break
                ;;
            3)
                create_config_only
                break
                ;;
            4)
                add_agents
                ;;
            5)
                show_status
                echo ""
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            6)
                echo "–í—ã—Ö–æ–¥..."
                exit 0
                ;;
            *)
                print_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6."
                echo ""
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
        esac
    done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
if [[ $EUID -ne 0 ]]; then
    print_error "–°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∞–º–∏ root"
    echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: sudo $0"
    exit 1
fi

# –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_menu
